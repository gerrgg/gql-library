{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  invariant(!!document && !!document.kind, 59, document);\n  var fragments = [];\n  var queries = [];\n  var mutations = [];\n  var subscriptions = [];\n  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n    var x = _a[_i];\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n  invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 60);\n  invariant(queries.length + mutations.length + subscriptions.length <= 1, 61, document, queries.length, subscriptions.length, mutations.length);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  invariant(definitions.length === 1, 62, document, definitions.length);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  invariant(operation.type === type, 63, requiredOperationName, requiredOperationName, usedOperationName);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,kCAAkC;AAS5D,WAAYC,YAIX;AAJD,WAAYA,YAAY;EACtBA,iDAAK;EACLA,uDAAQ;EACRA,+DAAY;AACd,CAAC,EAJWA,YAAY,KAAZA,YAAY;AAYxB,IAAMC,KAAK,GAAG,IAAIC,GAAG,EAAE;AAEvB,OAAM,SAAUC,aAAa,CAACC,IAAkB;EAC9C,IAAIC,IAAI;EACR,QAAQD,IAAI;IACV,KAAKJ,YAAY,CAACM,KAAK;MACrBD,IAAI,GAAG,OAAO;MACd;IACF,KAAKL,YAAY,CAACO,QAAQ;MACxBF,IAAI,GAAG,UAAU;MACjB;IACF,KAAKL,YAAY,CAACQ,YAAY;MAC5BH,IAAI,GAAG,cAAc;MACrB;EAAM;EAEV,OAAOA,IAAI;AACb;AAEA;AACA,OAAM,SAAUI,MAAM,CAACC,QAAsB;EAC3C,IAAMC,MAAM,GAAGV,KAAK,CAACW,GAAG,CAACF,QAAQ,CAAC;EAClC,IAAIC,MAAM,EAAE,OAAOA,MAAM;EAEzB,IAAIE,SAAS,EAAET,IAAI,EAAEC,IAAI;EAEzBN,SAAS,CACP,CAAC,CAACW,QAAQ,IAAI,CAAC,CAACA,QAAQ,CAACI,IAAI,EAC7B;MACEC;MACAC;EAIJ,IAAMC,SAAS,GAAqB,EAAE;EACtC,IAAMC,aAA+B;EACrC,KAAM,SAAS,GAAqBC,EAAG;IACjC,aAAa;IAEnB,IAAgBC,+BAAS;MAAdL,SAAC;MACN;;QAEFK,WAAS;MACV;QAEK,KAAI,OAAK;UACLJ,OAAE,KAAS,CAAEI,CAAC;UACpB;aACE,UAAQ;UACRH,SAAM;UACR;aACE,cAAe;UACfC,aAAM;UACR;MAAK;;;WAIR,sBACFF,kBAEDC,SACG,OAAS,IACRC,aAAQ,CAAMG;WACd,CACAL,cAAc,YAChB,qCACE,IAGJN,QACE,EAEEM,gBACAE,sBACAD,iBAOJ;EACAb,IAAI,GAACY,OAAQ,OAAM,GAAKhB,YAAU,MAAM;MAAE,QAAO,WAAY,CAACiB,gBAAa,EAErEb,mBACJ,aAAiB;MACjBkB,WAAW,GAACN,OAAS,UAASA,mBAC5B,UAAcC,YAGhBC,aAAY;WAEV,aAAkBG;MAClBE;EAKJV,SAAM,aAAa,oBAA0C;EAC7D,cAAY,SAAWU,oBAAmB,KAAM,MAAC;IAE7ClB,iBAAe,KAAI;SAEtB;QAAO;;;EAER,IAACmB;IAAAnB;IAAAD;IAAAS;EAAA;EAEDZ,KAAM,aAAY,EAAIuB,QAAE;EACxB,OAAMA,OAAI;;AAEZ,OAAC;EAED,IAAMC,SAAU,kBAAmB;EACjC,IAAMC,qBAAmB,gBAAU;EACnC,IAAMC,iCAAwB,UAAmB,CAACvB;EAClDL,SAAM,CACN0B,SACE,UAAUrB,IAAI,EAMjB","names":["invariant","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","cached","get","variables","kind","fragments","queries","mutations","subscriptions","_a","x","length","definitions","definition","payload","operation","requiredOperationName","usedOperationName"],"sources":["/home/greg/projects/graphql/library-frontend/node_modules/@apollo/src/react/parser/index.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of %s passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n    document\n  );\n\n  const fragments: DefinitionNode[] = [];\n  const queries: DefinitionNode[] = [];\n  const mutations: DefinitionNode[] = [];\n  const subscriptions: DefinitionNode[] = [];\n\n  for (const x of document.definitions) {\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      queries.length ||\n      mutations.length ||\n      subscriptions.length,\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `%s had %s queries, %s ` +\n      `subscriptions and %s mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    queries.length,\n    subscriptions.length,\n    mutations.length\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions =\n    queries.length ? queries\n    : mutations.length ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. %s had ` +\n      `%s definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    definitions.length\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n    requiredOperationName,\n    requiredOperationName,\n    usedOperationName\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}