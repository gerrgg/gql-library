{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n// Make builtins like Map and Set safe to use with non-extensible objects.\nimport \"./fixPolyfills.js\";\nimport { wrap } from \"optimism\";\nimport { equal } from \"@wry/equality\";\nimport { ApolloCache } from \"../core/cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { addTypenameToDocument, isReference, DocumentTransform } from \"../../utilities/index.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nvar InMemoryCache = /** @class */function (_super) {\n  __extends(InMemoryCache, _super);\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this) || this;\n    _this.watches = new Set();\n    _this.addTypenameTransform = new DocumentTransform(addTypenameToDocument);\n    // Override the default value, since InMemoryCache result objects are frozen\n    // in development and expected to remain logically immutable in production.\n    _this.assumeImmutableResults = true;\n    _this.makeVar = makeVar;\n    _this.txCount = 0;\n    _this.config = normalizeConfig(config);\n    _this.addTypename = !!_this.config.addTypename;\n    _this.policies = new Policies({\n      cache: _this,\n      dataIdFromObject: _this.config.dataIdFromObject,\n      possibleTypes: _this.config.possibleTypes,\n      typePolicies: _this.config.typePolicies\n    });\n    _this.init();\n    return _this;\n  }\n  InMemoryCache.prototype.init = function () {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    var rootStore = this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching\n    });\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n    this.resetResultCache();\n  };\n  InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {\n    var _this = this;\n    var previousReader = this.storeReader;\n    var fragments = this.config.fragments;\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(this, this.storeReader = new StoreReader({\n      cache: this,\n      addTypename: this.addTypename,\n      resultCacheMaxSize: this.config.resultCacheMaxSize,\n      canonizeResults: shouldCanonizeResults(this.config),\n      canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon,\n      fragments: fragments\n    }), fragments);\n    this.maybeBroadcastWatch = wrap(function (c, options) {\n      return _this.broadcastWatch(c, options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (c) {\n        // Return a cache key (thus enabling result caching) only if we're\n        // currently using a data store that can track cache dependencies.\n        var store = c.optimistic ? _this.optimisticData : _this.data;\n        if (supportsResultCaching(store)) {\n          var optimistic = c.optimistic,\n            id = c.id,\n            variables = c.variables;\n          return store.makeCacheKey(c.query,\n          // Different watches can have the same query, optimistic\n          // status, rootId, and variables, but if their callbacks are\n          // different, the (identical) result needs to be delivered to\n          // each distinct callback. The easiest way to achieve that\n          // separation is to include c.callback in the cache key for\n          // maybeBroadcastWatch calls. See issue #5733.\n          c.callback, canonicalStringify({\n            optimistic: optimistic,\n            id: id,\n            variables: variables\n          }));\n        }\n      }\n    });\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([this.data.group, this.optimisticData.group]).forEach(function (group) {\n      return group.resetCaching();\n    });\n  };\n  InMemoryCache.prototype.restore = function (data) {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  };\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return (optimistic ? this.optimisticData : this.data).extract();\n  };\n  InMemoryCache.prototype.read = function (options) {\n    var\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      _a = options.returnPartialData,\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = _a === void 0 ? false : _a;\n    try {\n      return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), {\n        store: options.optimistic ? this.optimisticData : this.data,\n        config: this.config,\n        returnPartialData: returnPartialData\n      })).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        // Swallow MissingFieldError and return null, so callers do not need to\n        // worry about catching \"normal\" exceptions resulting from incomplete\n        // cache data. Unexpected errors will be re-thrown. If you need more\n        // information about which fields were missing, use cache.diff instead,\n        // and examine diffResult.missing.\n        return null;\n      }\n      throw e;\n    }\n  };\n  InMemoryCache.prototype.write = function (options) {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n  InMemoryCache.prototype.modify = function (options) {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    var store = options.optimistic // Defaults to false.\n    ? this.optimisticData : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n  InMemoryCache.prototype.diff = function (options) {\n    return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), {\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config\n    }));\n  };\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return function () {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (_this.watches.delete(watch) && !_this.watches.size) {\n        forgetCache(_this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      _this.maybeBroadcastWatch.forget(watch);\n    };\n  };\n  InMemoryCache.prototype.gc = function (options) {\n    canonicalStringify.reset();\n    var ids = this.optimisticData.gc();\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n    return ids;\n  };\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  InMemoryCache.prototype.retain = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  };\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  InMemoryCache.prototype.release = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  };\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  InMemoryCache.prototype.identify = function (object) {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      globalThis.__DEV__ !== false && invariant.warn(e);\n    }\n  };\n  InMemoryCache.prototype.evict = function (options) {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = __assign(__assign({}, options), {\n        id: \"ROOT_QUERY\"\n      });\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n  InMemoryCache.prototype.reset = function (options) {\n    var _this = this;\n    this.init();\n    canonicalStringify.reset();\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach(function (watch) {\n        return _this.maybeBroadcastWatch.forget(watch);\n      });\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n    return Promise.resolve();\n  };\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  };\n  InMemoryCache.prototype.batch = function (options) {\n    var _this = this;\n    var update = options.update,\n      _a = options.optimistic,\n      optimistic = _a === void 0 ? true : _a,\n      removeOptimistic = options.removeOptimistic,\n      onWatchUpdated = options.onWatchUpdated;\n    var updateResult;\n    var perform = function (layer) {\n      var _a = _this,\n        data = _a.data,\n        optimisticData = _a.optimisticData;\n      ++_this.txCount;\n      if (layer) {\n        _this.data = _this.optimisticData = layer;\n      }\n      try {\n        return updateResult = update(_this);\n      } finally {\n        --_this.txCount;\n        _this.data = data;\n        _this.optimisticData = optimisticData;\n      }\n    };\n    var alreadyDirty = new Set();\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches(__assign(__assign({}, options), {\n        onWatchUpdated: function (watch) {\n          alreadyDirty.add(watch);\n          return false;\n        }\n      }));\n    }\n    if (typeof optimistic === \"string\") {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches(__assign(__assign({}, options), {\n        onWatchUpdated: function (watch, diff) {\n          var result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        }\n      }));\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(function (watch) {\n          return _this.maybeBroadcastWatch.dirty(watch);\n        });\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n    return updateResult;\n  };\n  InMemoryCache.prototype.performTransaction = function (update, optimisticId) {\n    return this.batch({\n      update: update,\n      optimistic: optimisticId || optimisticId !== null\n    });\n  };\n  InMemoryCache.prototype.transformDocument = function (document) {\n    return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n  };\n  InMemoryCache.prototype.broadcastWatches = function (options) {\n    var _this = this;\n    if (!this.txCount) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c, options);\n      });\n    }\n  };\n  InMemoryCache.prototype.addFragmentsToDocument = function (document) {\n    var fragments = this.config.fragments;\n    return fragments ? fragments.transform(document) : document;\n  };\n  InMemoryCache.prototype.addTypenameToDocument = function (document) {\n    if (this.addTypename) {\n      return this.addTypenameTransform.transformDocument(document);\n    }\n    return document;\n  };\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  InMemoryCache.prototype.broadcastWatch = function (c, options) {\n    var lastDiff = c.lastDiff;\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    var diff = this.diff(c);\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n      if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  };\n  return InMemoryCache;\n}(ApolloCache);\nexport { InMemoryCache };","map":{"version":3,"mappings":"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","names":["invariant","wrap","equal","ApolloCache","MissingFieldError","addTypenameToDocument","isReference","DocumentTransform","StoreReader","StoreWriter","EntityStore","supportsResultCaching","makeVar","forgetCache","recallCache","Policies","hasOwn","normalizeConfig","shouldCanonizeResults","canonicalStringify","__extends","config","_this","Set","addTypename","policies","cache","dataIdFromObject","possibleTypes","typePolicies","init","InMemoryCache","rootStore","data","Root","resultCaching","optimisticData","stump","resetResultCache","resetResultIdentities","previousReader","storeReader","storeWriter","resultCacheMaxSize","canonizeResults","canon","fragments","maybeBroadcastWatch","c","options","broadcastWatch","max","makeCacheKey","store","optimistic","id","variables","query","callback","group","forEach","resetCaching","replace","extract","_a","returnPartialData","diffQueryAgainstStore","result","e","txCount","writeToStore","broadcast","broadcastWatches","call","modify","fields","rootId","watch","watches","size","add","immediate","delete","forget","reset","ids","gc","resetCanon","retain","release","object","__ref","identify","globalThis","evict","discardWatches","clear","Promise","resolve","idToRemove","newOptimisticData","removeLayer","removeOptimistic","onWatchUpdated","updateResult","perform","layer","update","alreadyDirty","addLayer","diff","dirty","optimisticId","batch","document","addFragmentsToDocument","transform","addTypenameTransform","transformDocument","fromOptimisticTransaction","lastDiff"],"sources":["/home/greg/projects/graphql/library-frontend/node_modules/@apollo/src/cache/inmemory/inMemoryCache.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\nimport \"./fixPolyfills.js\";\n\nimport type { DocumentNode } from \"graphql\";\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\nimport { equal } from \"@wry/equality\";\n\nimport { ApolloCache } from \"../core/cache.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport type { StoreObject, Reference } from \"../../utilities/index.js\";\nimport {\n  addTypenameToDocument,\n  isReference,\n  DocumentTransform,\n} from \"../../utilities/index.js\";\nimport type { InMemoryCacheConfig, NormalizedCacheObject } from \"./types.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport type { OperationVariables } from \"../../core/index.js\";\n\ntype BroadcastOptions = Pick<\n  Cache.BatchOptions<InMemoryCache>,\n  \"optimistic\" | \"onWatchUpdated\"\n>;\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data!: EntityStore;\n  private optimisticData!: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n\n  private storeReader!: StoreReader;\n  private storeWriter!: StoreWriter;\n  private addTypenameTransform = new DocumentTransform(addTypenameToDocument);\n\n  private maybeBroadcastWatch!: OptimisticWrapperFunction<\n    [Cache.WatchOptions, BroadcastOptions?],\n    any,\n    [Cache.WatchOptions]\n  >;\n\n  // Override the default value, since InMemoryCache result objects are frozen\n  // in development and expected to remain logically immutable in production.\n  public readonly assumeImmutableResults = true;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = normalizeConfig(config);\n    this.addTypename = !!this.config.addTypename;\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    this.init();\n  }\n\n  private init() {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    const rootStore = (this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    }));\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n\n    this.resetResultCache();\n  }\n\n  private resetResultCache(resetResultIdentities?: boolean) {\n    const previousReader = this.storeReader;\n    const { fragments } = this.config;\n\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(\n      this,\n      (this.storeReader = new StoreReader({\n        cache: this,\n        addTypename: this.addTypename,\n        resultCacheMaxSize: this.config.resultCacheMaxSize,\n        canonizeResults: shouldCanonizeResults(this.config),\n        canon:\n          resetResultIdentities ? void 0 : (\n            previousReader && previousReader.canon\n          ),\n        fragments,\n      })),\n      fragments\n    );\n\n    this.maybeBroadcastWatch = wrap(\n      (c: Cache.WatchOptions, options?: BroadcastOptions) => {\n        return this.broadcastWatch(c, options);\n      },\n      {\n        max: this.config.resultCacheMaxSize,\n        makeCacheKey: (c: Cache.WatchOptions) => {\n          // Return a cache key (thus enabling result caching) only if we're\n          // currently using a data store that can track cache dependencies.\n          const store = c.optimistic ? this.optimisticData : this.data;\n          if (supportsResultCaching(store)) {\n            const { optimistic, id, variables } = c;\n            return store.makeCacheKey(\n              c.query,\n              // Different watches can have the same query, optimistic\n              // status, rootId, and variables, but if their callbacks are\n              // different, the (identical) result needs to be delivered to\n              // each distinct callback. The easiest way to achieve that\n              // separation is to include c.callback in the cache key for\n              // maybeBroadcastWatch calls. See issue #5733.\n              c.callback,\n              canonicalStringify({ optimistic, id, variables })\n            );\n          }\n        },\n      }\n    );\n\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([this.data.group, this.optimisticData.group]).forEach((group) =>\n      group.resetCaching()\n    );\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n    try {\n      return (\n        this.storeReader.diffQueryAgainstStore<T>({\n          ...options,\n          store: options.optimistic ? this.optimisticData : this.data,\n          config: this.config,\n          returnPartialData,\n        }).result || null\n      );\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        // Swallow MissingFieldError and return null, so callers do not need to\n        // worry about catching \"normal\" exceptions resulting from incomplete\n        // cache data. Unexpected errors will be re-thrown. If you need more\n        // information about which fields were missing, use cache.diff instead,\n        // and examine diffResult.missing.\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  public write(options: Cache.WriteOptions): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify<Entity extends Record<string, any> = Record<string, any>>(\n    options: Cache.ModifyOptions<Entity>\n  ): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store =\n      (\n        options.optimistic // Defaults to false.\n      ) ?\n        this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<TData, TVariables extends OperationVariables = any>(\n    options: Cache.DiffOptions<TData, TVariables>\n  ): Cache.DiffResult<TData> {\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config,\n    });\n  }\n\n  public watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>\n  ): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  public gc(options?: {\n    // If true, also free non-essential result cache memory by bulk-releasing\n    // this.{store{Reader,Writer},maybeBroadcastWatch}. Defaults to false.\n    resetResultCache?: boolean;\n    // If resetResultCache is true, this.storeReader.canon will be preserved by\n    // default, but can also be discarded by passing resetResultIdentities:true.\n    // Defaults to false.\n    resetResultIdentities?: boolean;\n  }) {\n    canonicalStringify.reset();\n    const ids = this.optimisticData.gc();\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n    return ids;\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      invariant.warn(e);\n    }\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(options?: Cache.ResetOptions): Promise<void> {\n    this.init();\n\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach((watch) => this.maybeBroadcastWatch.forget(watch));\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public batch<TUpdateResult>(\n    options: Cache.BatchOptions<InMemoryCache, TUpdateResult>\n  ): TUpdateResult {\n    const {\n      update,\n      optimistic = true,\n      removeOptimistic,\n      onWatchUpdated,\n    } = options;\n\n    let updateResult: TUpdateResult;\n    const perform = (layer?: EntityStore): TUpdateResult => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        return (updateResult = update(this));\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    const alreadyDirty = new Set<Cache.WatchOptions>();\n\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch) {\n          alreadyDirty.add(watch);\n          return false;\n        },\n      });\n    }\n\n    if (typeof optimistic === \"string\") {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch, diff) {\n          const result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        },\n      });\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach((watch) => this.maybeBroadcastWatch.dirty(watch));\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n\n    return updateResult!;\n  }\n\n  public performTransaction(\n    update: (cache: InMemoryCache) => any,\n    optimisticId?: string | null\n  ) {\n    return this.batch({\n      update,\n      optimistic: optimisticId || optimisticId !== null,\n    });\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n  }\n\n  protected broadcastWatches(options?: BroadcastOptions) {\n    if (!this.txCount) {\n      this.watches.forEach((c) => this.maybeBroadcastWatch(c, options));\n    }\n  }\n\n  private addFragmentsToDocument(document: DocumentNode) {\n    const { fragments } = this.config;\n    return fragments ? fragments.transform(document) : document;\n  }\n\n  private addTypenameToDocument(document: DocumentNode) {\n    if (this.addTypename) {\n      return this.addTypenameTransform.transformDocument(document);\n    }\n    return document;\n  }\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(c: Cache.WatchOptions, options?: BroadcastOptions) {\n    const { lastDiff } = c;\n\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    const diff = this.diff<any>(c);\n\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (\n        options.onWatchUpdated &&\n        options.onWatchUpdated.call(this, c, diff, lastDiff) === false\n      ) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback((c.lastDiff = diff), lastDiff);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}