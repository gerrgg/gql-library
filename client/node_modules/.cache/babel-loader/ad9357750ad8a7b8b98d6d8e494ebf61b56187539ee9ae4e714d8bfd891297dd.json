{"ast":null,"code":"function defaultDispose() {}\nexport class StrongCache {\n  constructor() {\n    let max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n    let dispose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDispose;\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n  has(key) {\n    return this.map.has(key);\n  }\n  get(key) {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n  get size() {\n    return this.map.size;\n  }\n  getNode(key) {\n    const node = this.map.get(key);\n    if (node && node !== this.newest) {\n      const {\n        older,\n        newer\n      } = node;\n      if (newer) {\n        newer.older = older;\n      }\n      if (older) {\n        older.newer = newer;\n      }\n      node.older = this.newest;\n      node.older.newer = node;\n      node.newer = null;\n      this.newest = node;\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n    return node;\n  }\n  set(key, value) {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n    this.newest = node;\n    this.oldest = this.oldest || node;\n    this.map.set(key, node);\n    return node.value;\n  }\n  clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n  delete(key) {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n      this.map.delete(key);\n      this.dispose(node.value, key);\n      return true;\n    }\n    return false;\n  }\n}","map":{"version":3,"mappings":"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","names":["defaultDispose","StrongCache","constructor","max","Infinity","dispose","Map","has","key","map","get","node","getNode","value","size","newest","older","newer","oldest","set","clean","delete"],"sources":["/home/greg/projects/graphql/library-frontend/node_modules/@wry/caches/src/strong.ts"],"sourcesContent":["import type { CommonCache } from \"./common\";\n\ninterface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class StrongCache<K = any, V = any> implements CommonCache<K, V> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  public get size() {\n    return this.map.size;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.map.set(key, node);\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}