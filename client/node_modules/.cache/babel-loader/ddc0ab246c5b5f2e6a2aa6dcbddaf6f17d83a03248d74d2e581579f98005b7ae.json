{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useFragment(options) {\n  var cache = useApolloClient().cache;\n  var fragment = options.fragment,\n    fragmentName = options.fragmentName,\n    from = options.from,\n    _a = options.optimistic,\n    optimistic = _a === void 0 ? true : _a,\n    rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n  var diffOptions = __assign(__assign({}, rest), {\n    returnPartialData: true,\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic: optimistic\n  });\n  var resultRef = React.useRef();\n  var latestDiff = cache.diff(diffOptions);\n  // Used for both getSnapshot and getServerSnapshot\n  var getSnapshot = function () {\n    var latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current && equal(resultRef.current.data, latestDiffToResult.data) ? resultRef.current : resultRef.current = latestDiffToResult;\n  };\n  return useSyncExternalStore(function (forceUpdate) {\n    var lastTimeout = 0;\n    var unsubcribe = cache.watch(__assign(__assign({}, diffOptions), {\n      immediate: true,\n      callback: function (diff) {\n        if (!equal(diff, latestDiff)) {\n          resultRef.current = diffToResult(latestDiff = diff);\n          lastTimeout = setTimeout(forceUpdate);\n        }\n      }\n    }));\n    return function () {\n      unsubcribe();\n      clearTimeout(lastTimeout);\n    };\n  }, getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,KAAK,QAAQ,eAAe;AAGrC,SAASC,cAAc,QAAQ,0BAA0B;AAQzD,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,oBAAoB,QAAQ,2BAA2B;AA8BhE,OAAM,SAAUC,WAAW,CACzBC,OAAyC;EAEjC,SAAK,GAAKH,eAAe,EAAE,MAAtB;EAEL,YAAQ,GAAqDG,OAAO,SAA5D;IAAEC,YAAY,GAAuCD,OAAO,aAA9C;IAAEE,IAAI,GAAiCF,OAAO,KAAxC;IAAEG,KAA+BH,OAAO,WAArB;IAAjBI,UAAU,mBAAG,IAAI;IAAKC,IAAI,UAAKL,OAAO,EAAtE,kDAA4D,CAAF;EAEhE,IAAMM,WAAW,yBACZD,IAAI;IACPE,iBAAiB,EAAE,IAAI;IACvBC,EAAE,EAAE,OAAON,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGO,KAAK,CAACC,QAAQ,CAACR,IAAI,CAAC;IAC1DS,KAAK,EAAEF,KAAK,CAAC,gBAAgB,CAAC,CAACG,QAAQ,EAAEX,YAAY,CAAC;IACtDG,UAAU;EAAA,EACX;EAED,IAAMS,SAAS,GAAGnB,KAAK,CAACoB,MAAM,EAA4B;EAC1D,IAAIC,UAAU,GAAGN,KAAK,CAACO,IAAI,CAAQV,WAAW,CAAC;EAE/C;EACA,IAAMW,WAAW,GAAG;IAClB,IAAMC,kBAAkB,GAAGC,YAAY,CAACJ,UAAU,CAAC;IACnD,OACIF,SAAS,CAACO,OAAO,IACfzB,KAAK,CAACkB,SAAS,CAACO,OAAO,CAACC,IAAI,EAAEH,kBAAkB,CAACG,IAAI,CAAC,GAExDR,SAAS,CAACO,OAAO,GAChBP,SAAS,CAACO,OAAO,GAAGF,kBAAmB;EAC9C,CAAC;EAED,OAAOpB,oBAAoB,CACzB,UAACwB,WAAW;IACV,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAMC,UAAU,GAAGf,KAAK,CAACgB,KAAK,uBACzBnB,WAAW;MACdoB,SAAS,EAAE,IAAI;MACfC,QAAQ,YAACX,IAAI;QACX,IAAI,CAACrB,KAAK,CAACqB,IAAI,EAAED,UAAU,CAAC,EAAE;UAC5BF,SAAS,CAACO,OAAO,GAAGD,YAAY,CAAEJ,UAAU,GAAGC,IAAI,CAAE;UACrDO,WAAW,GAAGK,UAAU,CAACN,WAAW,CAAQ;QAC9C;MACF;IAAC,GACD;IACF,OAAO;MACLE,UAAU,EAAE;MACZK,YAAY,CAACN,WAAW,CAAC;IAC3B,CAAC;EACH,CAAC,EACDN,WAAW,EACXA,WAAW,CACZ;AACH;AAEA,SAASE,YAAY,CACnBH,IAA6B;EAE7B,IAAMc,MAAM,GAAG;IACbT,IAAI,EAAEL,IAAI,CAACc,MAAO;IAClBC,QAAQ,EAAE,CAAC,CAACf,IAAI,CAACe;GACU;EAE7B,IAAIf,IAAI,CAACgB,OAAO,EAAE;IAChBF,MAAM,CAACE,OAAO,GAAGpC,cAAc,CAACoB,IAAI,CAACgB,OAAO,CAACC,GAAG,CAAC,UAACC,KAAK;MAAK,YAAK,CAACF,OAAO;IAAb,CAAa,CAAC,CAAC;EAC7E;EAEA,OAAOF,MAAM;AACf","names":["React","equal","mergeDeepArray","useApolloClient","useSyncExternalStore","useFragment","options","fragmentName","from","_a","optimistic","rest","diffOptions","returnPartialData","id","cache","identify","query","fragment","resultRef","useRef","latestDiff","diff","getSnapshot","latestDiffToResult","diffToResult","current","data","forceUpdate","lastTimeout","unsubcribe","watch","immediate","callback","setTimeout","clearTimeout","result","complete","missing","map","error"],"sources":["/home/greg/projects/graphql/library-frontend/node_modules/@apollo/src/react/hooks/useFragment.ts"],"sourcesContent":["import * as React from \"react\";\nimport { equal } from \"@wry/equality\";\n\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: TData;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<TData>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient();\n\n  const { fragment, fragmentName, from, optimistic = true, ...rest } = options;\n\n  const diffOptions: Cache.DiffOptions<TData, TVars> = {\n    ...rest,\n    returnPartialData: true,\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic,\n  };\n\n  const resultRef = React.useRef<UseFragmentResult<TData>>();\n  let latestDiff = cache.diff<TData>(diffOptions);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = () => {\n    const latestDiffToResult = diffToResult(latestDiff);\n    return (\n        resultRef.current &&\n          equal(resultRef.current.data, latestDiffToResult.data)\n      ) ?\n        resultRef.current\n      : (resultRef.current = latestDiffToResult);\n  };\n\n  return useSyncExternalStore(\n    (forceUpdate) => {\n      let lastTimeout = 0;\n      const unsubcribe = cache.watch({\n        ...diffOptions,\n        immediate: true,\n        callback(diff) {\n          if (!equal(diff, latestDiff)) {\n            resultRef.current = diffToResult((latestDiff = diff));\n            lastTimeout = setTimeout(forceUpdate) as any;\n          }\n        },\n      });\n      return () => {\n        unsubcribe();\n        clearTimeout(lastTimeout);\n      };\n    },\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}