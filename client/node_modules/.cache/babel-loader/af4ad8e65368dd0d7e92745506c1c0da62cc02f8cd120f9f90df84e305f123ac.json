{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, parseAndCheckHttpResponse } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError, filterOperationVariables } from \"../utils/index.js\";\nimport { maybe, getMainDefinition, removeClientSetsFromDocument } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n  var _a = linkOptions.uri,\n    uri = _a === void 0 ? \"/graphql\" : _a,\n    // use default global fetch if nothing passed in\n    preferredFetch = linkOptions.fetch,\n    _b = linkOptions.print,\n    print = _b === void 0 ? defaultPrinter : _b,\n    includeExtensions = linkOptions.includeExtensions,\n    preserveHeaderCase = linkOptions.preserveHeaderCase,\n    useGETForQueries = linkOptions.useGETForQueries,\n    _c = linkOptions.includeUnusedVariables,\n    includeUnusedVariables = _c === void 0 ? false : _c,\n    requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n  if (globalThis.__DEV__ !== false) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions,\n      preserveHeaderCase: preserveHeaderCase\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    var clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n        name_1 = _a.name,\n        version = _a.version;\n      if (name_1) {\n        clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n      }\n      if (version) {\n        clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n      }\n    }\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n    if (hasDirectives([\"client\"], operation.query)) {\n      var transformedQuery = removeClientSetsFromDocument(operation.query);\n      if (!transformedQuery) {\n        return fromError(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n      }\n      operation.query = transformedQuery;\n    }\n    //uses fallback, link, and then context to build options\n    var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig),\n      options = _b.options,\n      body = _b.body;\n    if (body.variables && !includeUnusedVariables) {\n      body.variables = filterOperationVariables(body.variables, operation.query);\n    }\n    var controller;\n    if (!options.signal && typeof AbortController !== \"undefined\") {\n      controller = new AbortController();\n      options.signal = controller.signal;\n    }\n    // If requested, set method to GET if there are no mutations.\n    var definitionIsMutation = function (d) {\n      return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n    };\n    var definitionIsSubscription = function (d) {\n      return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n    };\n    var isSubscription = definitionIsSubscription(getMainDefinition(operation.query));\n    // does not match custom directives beginning with @defer\n    var hasDefer = hasDirectives([\"defer\"], operation.query);\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = \"GET\";\n    }\n    if (hasDefer || isSubscription) {\n      options.headers = options.headers || {};\n      var acceptHeader = \"multipart/mixed;\";\n      // Omit defer-specific headers if the user attempts to defer a selection\n      // set on a subscription and log a warning.\n      if (isSubscription && hasDefer) {\n        globalThis.__DEV__ !== false && invariant.warn(38);\n      }\n      if (isSubscription) {\n        acceptHeader += \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n      } else if (hasDefer) {\n        acceptHeader += \"deferSpec=20220824,application/json\";\n      }\n      options.headers.accept = acceptHeader;\n    }\n    if (options.method === \"GET\") {\n      var _c = rewriteURIForGET(chosenURI, body),\n        newURI = _c.newURI,\n        parseError = _c.parseError;\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, \"Payload\");\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n    return new Observable(function (observer) {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      var observerNext = observer.next.bind(observer);\n      currentFetch(chosenURI, options).then(function (response) {\n        var _a;\n        operation.setContext({\n          response: response\n        });\n        var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n        if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n          return readMultipartBody(response, observerNext);\n        } else {\n          return parseAndCheckHttpResponse(operation)(response).then(observerNext);\n        }\n      }).then(function () {\n        controller = undefined;\n        observer.complete();\n      }).catch(function (err) {\n        controller = undefined;\n        handleError(err, observer);\n      });\n      return function () {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"mappings":"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","names":["invariant","ApolloLink","Observable","hasDirectives","serializeFetchParameter","selectURI","handleError","readMultipartBody","parseAndCheckHttpResponse","checkFetcher","selectHttpOptionsAndBodyInternal","defaultPrinter","fallbackHttpConfig","rewriteURIForGET","fromError","filterOperationVariables","maybe","getMainDefinition","removeClientSetsFromDocument","backupFetch","createHttpLink","linkOptions","uri","preferredFetch","_b","print","includeExtensions","preserveHeaderCase","useGETForQueries","_c","includeUnusedVariables","requestOptions","globalThis","linkConfig","http","options","fetchOptions","credentials","headers","operation","chosenURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","version","contextHeaders","contextConfig","query","transformedQuery","Error","body","variables","controller","signal","AbortController","definitionIsMutation","d","kind","definitionIsSubscription","isSubscription","hasDefer","definitions","some","method","acceptHeader","accept","newURI","parseError","observer","currentFetch","observerNext","next","bind","then","response","setContext","ctype","get","test","undefined","complete","catch","err","abort"],"sources":["/home/greg/projects/graphql/library-frontend/node_modules/@apollo/src/link/http/createHttpLink.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type { DefinitionNode } from \"graphql\";\n\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport {\n  handleError,\n  readMultipartBody,\n  parseAndCheckHttpResponse,\n} from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport type { HttpOptions } from \"./selectHttpOptionsAndBody.js\";\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n} from \"./selectHttpOptionsAndBody.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError, filterOperationVariables } from \"../utils/index.js\";\nimport {\n  maybe,\n  getMainDefinition,\n  removeClientSetsFromDocument,\n} from \"../../utilities/index.js\";\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = \"/graphql\",\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    preserveHeaderCase,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions, preserveHeaderCase },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink((operation) => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      \"apollographql-client-name\"?: string;\n      \"apollographql-client-version\"?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders[\"apollographql-client-name\"] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    if (hasDirectives([\"client\"], operation.query)) {\n      const transformedQuery = removeClientSetsFromDocument(operation.query);\n\n      if (!transformedQuery) {\n        return fromError(\n          new Error(\n            \"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"\n          )\n        );\n      }\n\n      operation.query = transformedQuery;\n    }\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      body.variables = filterOperationVariables(\n        body.variables,\n        operation.query\n      );\n    }\n\n    let controller: AbortController | undefined;\n    if (!options.signal && typeof AbortController !== \"undefined\") {\n      controller = new AbortController();\n      options.signal = controller.signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n    };\n    const definitionIsSubscription = (d: DefinitionNode) => {\n      return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n    };\n    const isSubscription = definitionIsSubscription(\n      getMainDefinition(operation.query)\n    );\n    // does not match custom directives beginning with @defer\n    const hasDefer = hasDirectives([\"defer\"], operation.query);\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = \"GET\";\n    }\n\n    if (hasDefer || isSubscription) {\n      options.headers = options.headers || {};\n      let acceptHeader = \"multipart/mixed;\";\n      // Omit defer-specific headers if the user attempts to defer a selection\n      // set on a subscription and log a warning.\n      if (isSubscription && hasDefer) {\n        invariant.warn(\"Multipart-subscriptions do not support @defer\");\n      }\n\n      if (isSubscription) {\n        acceptHeader +=\n          \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n      } else if (hasDefer) {\n        acceptHeader += \"deferSpec=20220824,application/json\";\n      }\n      options.headers.accept = acceptHeader;\n    }\n\n    if (options.method === \"GET\") {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, \"Payload\");\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable((observer) => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      const observerNext = observer.next.bind(observer);\n      currentFetch!(chosenURI, options)\n        .then((response) => {\n          operation.setContext({ response });\n          const ctype = response.headers?.get(\"content-type\");\n\n          if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n            return readMultipartBody(response, observerNext);\n          } else {\n            return parseAndCheckHttpResponse(operation)(response).then(\n              observerNext\n            );\n          }\n        })\n        .then(() => {\n          controller = undefined;\n          observer.complete();\n        })\n        .catch((err) => {\n          controller = undefined;\n          handleError(err, observer);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}