{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport function toPromise(observable) {\n  var completed = false;\n  return new Promise(function (resolve, reject) {\n    observable.subscribe({\n      next: function (data) {\n        if (completed) {\n          globalThis.__DEV__ !== false && invariant.warn(42);\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject\n    });\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,kCAAkC;AAG5D,OAAM,SAAUC,SAAS,CAAIC,UAAyB;EACpD,IAAIC,SAAS,GAAG,KAAK;EACrB,OAAO,IAAIC,OAAO,CAAI,UAACC,OAAO,EAAEC,MAAM;IACpCJ,UAAU,CAACK,SAAS,CAAC;MACnBC,IAAI,EAAE,UAACC,IAAI;QACT,IAAIN,SAAS,EAAE;UACbO,UAAU,QACR;QAEJ,CAAC,MAAM;UACLP,SAAS,GAAG,IAAI;UAChBE,OAAO,CAACI,IAAI,CAAC;QACf;MACF,CAAC;MACDE,KAAK,EAAEL;KACR,CAAC;EACJ,CAAC,CAAC;AACJ","names":["invariant","toPromise","observable","completed","Promise","resolve","reject","subscribe","next","data","globalThis","error"],"sources":["/home/greg/projects/graphql/library-frontend/node_modules/@apollo/src/link/utils/toPromise.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport type { Observable } from \"../../utilities/index.js\";\n\nexport function toPromise<R>(observable: Observable<R>): Promise<R> {\n  let completed = false;\n  return new Promise<R>((resolve, reject) => {\n    observable.subscribe({\n      next: (data) => {\n        if (completed) {\n          invariant.warn(\n            `Promise Wrapper does not support multiple results from Observable`\n          );\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject,\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}