{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport * as React from \"react\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapQueryRef } from \"../cache/QueryReference.js\";\nimport { getSuspenseCache } from \"../cache/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nexport function useBackgroundQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  var client = useApolloClient(options.client);\n  var suspenseCache = getSuspenseCache(client);\n  var watchQueryOptions = useWatchQueryOptions({\n    client: client,\n    query: query,\n    options: options\n  });\n  var fetchPolicy = watchQueryOptions.fetchPolicy,\n    variables = watchQueryOptions.variables;\n  var _a = options.queryKey,\n    queryKey = _a === void 0 ? [] : _a;\n  // This ref tracks the first time query execution is enabled to determine\n  // whether to return a query ref or `undefined`. When initialized\n  // in a skipped state (either via `skip: true` or `skipToken`) we return\n  // `undefined` for the `queryRef` until the query has been enabled. Once\n  // enabled, a query ref is always returned regardless of whether the query is\n  // skipped again later.\n  var didFetchResult = React.useRef(fetchPolicy !== \"standby\");\n  didFetchResult.current || (didFetchResult.current = fetchPolicy !== \"standby\");\n  var cacheKey = __spreadArray([query, canonicalStringify(variables)], [].concat(queryKey), true);\n  var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n    return client.watchQuery(watchQueryOptions);\n  });\n  var _b = React.useState(function () {\n      return new Map([[queryRef.key, queryRef.promise]]);\n    }),\n    promiseCache = _b[0],\n    setPromiseCache = _b[1];\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    var promise = queryRef.applyOptions(watchQueryOptions);\n    promiseCache.set(queryRef.key, promise);\n  }\n  React.useEffect(function () {\n    return queryRef.retain();\n  }, [queryRef]);\n  var fetchMore = React.useCallback(function (options) {\n    var promise = queryRef.fetchMore(options);\n    setPromiseCache(function (promiseCache) {\n      return new Map(promiseCache).set(queryRef.key, queryRef.promise);\n    });\n    return promise;\n  }, [queryRef]);\n  var refetch = React.useCallback(function (variables) {\n    var promise = queryRef.refetch(variables);\n    setPromiseCache(function (promiseCache) {\n      return new Map(promiseCache).set(queryRef.key, queryRef.promise);\n    });\n    return promise;\n  }, [queryRef]);\n  queryRef.promiseCache = promiseCache;\n  var wrappedQueryRef = React.useMemo(function () {\n    return wrapQueryRef(queryRef);\n  }, [queryRef]);\n  return [didFetchResult.current ? wrappedQueryRef : void 0, {\n    fetchMore: fetchMore,\n    refetch: refetch\n  }];\n}","map":{"version":3,"mappings":"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","names":["React","useApolloClient","wrapQueryRef","getSuspenseCache","useWatchQueryOptions","canonicalStringify","useBackgroundQuery","query","options","Object","create","client","suspenseCache","watchQueryOptions","variables","queryKey","didFetchResult","useRef","fetchPolicy","current","cacheKey","concat","queryRef","getQueryRef","watchQuery","useState","Map","key","promise","promiseCache","setPromiseCache","didChangeOptions","applyOptions","set","useEffect","retain","fetchMore","useCallback","refetch","wrappedQueryRef","useMemo"],"sources":["/home/greg/projects/graphql/library-frontend/node_modules/@apollo/src/react/hooks/useBackgroundQuery.ts"],"sourcesContent":["import * as React from \"react\";\nimport type {\n  DocumentNode,\n  FetchMoreQueryOptions,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapQueryRef } from \"../cache/QueryReference.js\";\nimport type { QueryReference } from \"../cache/QueryReference.js\";\nimport type { BackgroundQueryHookOptions, NoInfer } from \"../types/types.js\";\nimport { __use } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../cache/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport type { FetchMoreFunction, RefetchFunction } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport type { CacheKey } from \"../cache/types.js\";\nimport type { SkipToken } from \"./constants.js\";\n\nexport type UseBackgroundQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = {\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  refetch: RefetchFunction<TData, TVariables>;\n};\n\ntype BackgroundQueryHookOptionsNoInfer<\n  TData,\n  TVariables extends OperationVariables,\n> = BackgroundQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>;\n\nexport function useBackgroundQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends Omit<BackgroundQueryHookOptions<TData>, \"variables\">,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & TOptions\n): [\n  (\n    | QueryReference<\n        TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n          TOptions[\"returnPartialData\"] extends true ?\n            DeepPartial<TData> | undefined\n          : TData | undefined\n        : TOptions[\"returnPartialData\"] extends true ? DeepPartial<TData>\n        : TData\n      >\n    | (TOptions[\"skip\"] extends boolean ? undefined : never)\n  ),\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): [\n  QueryReference<DeepPartial<TData> | undefined>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): [\n  QueryReference<TData | undefined>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    skip: boolean;\n    returnPartialData: true;\n  }\n): [\n  QueryReference<DeepPartial<TData>> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    returnPartialData: true;\n  }\n): [\n  QueryReference<DeepPartial<TData>>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    skip: boolean;\n  }\n): [\n  QueryReference<TData> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [QueryReference<TData>, UseBackgroundQueryResult<TData, TVariables>];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SkipToken\n): [undefined, UseBackgroundQueryResult<TData, TVariables>];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | SkipToken\n    | (BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n        returnPartialData: true;\n      })\n): [\n  QueryReference<DeepPartial<TData>> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SkipToken | BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [\n  QueryReference<TData> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken &\n        Partial<BackgroundQueryHookOptionsNoInfer<TData, TVariables>>)\n    | BackgroundQueryHookOptionsNoInfer<TData, TVariables> = Object.create(null)\n): [\n  QueryReference<TData> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n] {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { fetchPolicy, variables } = watchQueryOptions;\n  const { queryKey = [] } = options;\n\n  // This ref tracks the first time query execution is enabled to determine\n  // whether to return a query ref or `undefined`. When initialized\n  // in a skipped state (either via `skip: true` or `skipToken`) we return\n  // `undefined` for the `queryRef` until the query has been enabled. Once\n  // enabled, a query ref is always returned regardless of whether the query is\n  // skipped again later.\n  const didFetchResult = React.useRef(fetchPolicy !== \"standby\");\n  didFetchResult.current ||= fetchPolicy !== \"standby\";\n\n  const cacheKey: CacheKey = [\n    query,\n    canonicalStringify(variables),\n    ...([] as any[]).concat(queryKey),\n  ];\n\n  const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n    client.watchQuery(watchQueryOptions as WatchQueryOptions<any, any>)\n  );\n\n  const [promiseCache, setPromiseCache] = React.useState(\n    () => new Map([[queryRef.key, queryRef.promise]])\n  );\n\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    const promise = queryRef.applyOptions(watchQueryOptions);\n    promiseCache.set(queryRef.key, promise);\n  }\n\n  React.useEffect(() => queryRef.retain(), [queryRef]);\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      const promise = queryRef.fetchMore(options as FetchMoreQueryOptions<any>);\n\n      setPromiseCache((promiseCache) =>\n        new Map(promiseCache).set(queryRef.key, queryRef.promise)\n      );\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = queryRef.refetch(variables);\n\n      setPromiseCache((promiseCache) =>\n        new Map(promiseCache).set(queryRef.key, queryRef.promise)\n      );\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  queryRef.promiseCache = promiseCache;\n\n  const wrappedQueryRef = React.useMemo(\n    () => wrapQueryRef(queryRef),\n    [queryRef]\n  );\n\n  return [\n    didFetchResult.current ? wrappedQueryRef : void 0,\n    { fetchMore, refetch },\n  ];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}